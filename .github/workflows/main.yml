# This is a basic workflow to help you get started with Actions
name: Build and Push Flask App to Docker Hub

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # Test should be done, if fail, exit 1 to not build tags
      
      # Comment below to continue
      - name: deliberate exit
        run: exit 1

      - name: Automatic Tagging of Releases
        id: incremenent-git-tag
        run: |
          bash ./build/git_update.sh -v patch

      - name: Build docker image
        env:
          IMAGE_TAG: ${{ steps.incremenent-git-tag.outputs.git-tag }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/flaskapp-aws
        run: |
          echo $IMAGE_TAG
          docker build -t $DOCKER_IMAGE:$IMAGE_TAG .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
          docker push $DOCKER_IMAGE:$IMAGE_TAG

  # run-terraform-k8s-manifests:
  #   runs-on: ubuntu-latest
  #   needs: ["build-docker-image"]
  #   steps:
  #     - name: Git Checkout
      
  #     - name: Configure AWS credentials from AWS account
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         role-to-assume: ${{ secrets.AWS_ROLE }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #         role-session-name: GitHub-OIDC-TERRAFORM

      # Steps
      # change directory where terraform manifests files are located
      # cd 00-ingress-externaldns-terraform-manifests (if possible)
      # terraform init
      # terraform validate
      # terraform plan -var docker_image_name=$DOCKER_IMAGE -var docker_image_tag=$IMAGE_TAG -var db_hostname=${{ secrets.DB_HOSTNAME }} -var db_password_64encoded=${{ secrets.DB_PASSWORD }}
      # if failure, exit 1
      # terraform apply -var docker_image_name=$DOCKER_IMAGE -var docker_image_tag=$IMAGE_TAG -var db_hostname=${{ secrets.DB_HOSTNAME }} -var db_password_64encoded=${{ secrets.DB_PASSWORD }}
